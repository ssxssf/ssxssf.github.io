<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>如何使用HEXO快速搭建个人博客</title>
    <link href="/2025/04/20/hexo/"/>
    <url>/2025/04/20/hexo/</url>
    
    <content type="html"><![CDATA[<p><strong>基于 Hexo + Fluid 主题的博客开发指南</strong></p><p>本指南将详细介绍如何使用 Hexo 静态博客框架搭配 Fluid 主题搭建一个美观、功能丰富的个人博客，并部署到 GitHub Pages 或 VPS。</p><hr><h1 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h1><h2 id="1-1-安装-Node-js"><a href="#1-1-安装-Node-js" class="headerlink" title="1.1 安装 Node.js"></a>1.1 安装 Node.js</h2><p>Hexo 基于 Node.js，需先安装：<br>• Windows&#x2F;macOS：从 <a href="https://nodejs.org/">Node.js 官网</a> 下载 LTS 版本安装。</p><p>• Linux：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://deb.nodesource.com/setup_lts.x | <span class="hljs-built_in">sudo</span> -E bash -<br><span class="hljs-built_in">sudo</span> apt-get install -y nodejs<br></code></pre></td></tr></table></figure><p>验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v  <span class="hljs-comment"># 检查 Node.js 版本</span><br>npm -v   <span class="hljs-comment"># 检查 npm 版本</span><br></code></pre></td></tr></table></figure><h2 id="1-2-安装-Git"><a href="#1-2-安装-Git" class="headerlink" title="1.2 安装 Git"></a>1.2 安装 Git</h2><p>Hexo 依赖 Git 管理文章和部署：<br>• Windows&#x2F;macOS：从 <a href="https://git-scm.com/">Git 官网</a> 下载安装。</p><p>• Linux：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install git<br></code></pre></td></tr></table></figure><p>验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version<br></code></pre></td></tr></table></figure><p><strong>1.3 安装 Hexo</strong><br>全局安装 Hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure><hr><h1 id="2-初始化-Hexo-博客"><a href="#2-初始化-Hexo-博客" class="headerlink" title="2. 初始化 Hexo 博客"></a>2. 初始化 Hexo 博客</h1><h2 id="2-1-创建博客项目"><a href="#2-1-创建博客项目" class="headerlink" title="2.1 创建博客项目"></a>2.1 创建博客项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myblog  <span class="hljs-comment"># 初始化项目</span><br><span class="hljs-built_in">cd</span> myblog         <span class="hljs-comment"># 进入项目目录</span><br>npm install       <span class="hljs-comment"># 安装依赖</span><br></code></pre></td></tr></table></figure><h2 id="2-2-启动本地服务器"><a href="#2-2-启动本地服务器" class="headerlink" title="2.2 启动本地服务器"></a>2.2 启动本地服务器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo server<br></code></pre></td></tr></table></figure><p>访问 <code>http://localhost:4000</code> 查看默认博客。</p><hr><h1 id="3-安装-Fluid-主题"><a href="#3-安装-Fluid-主题" class="headerlink" title="3. 安装 Fluid 主题"></a>3. 安装 Fluid 主题</h1><h2 id="3-1-下载-Fluid"><a href="#3-1-下载-Fluid" class="headerlink" title="3.1 下载 Fluid"></a>3.1 下载 Fluid</h2><p>在博客目录下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><h2 id="3-2-配置-Fluid"><a href="#3-2-配置-Fluid" class="headerlink" title="3.2 配置 Fluid"></a>3.2 配置 Fluid</h2><ol><li><p>修改 <code>_config.yml</code>（Hexo 主配置）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br></code></pre></td></tr></table></figure></li><li><p>创建 <code>_config.fluid.yml</code>（Fluid 主题配置）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> node_modules/hexo-theme-fluid/_config.yml _config.fluid.yml<br></code></pre></td></tr></table></figure><p>然后编辑 <code>_config.fluid.yml</code> 自定义主题样式。</p></li></ol><h2 id="3-3-启用-Fluid"><a href="#3-3-启用-Fluid" class="headerlink" title="3.3 启用 Fluid"></a>3.3 启用 Fluid</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s<br></code></pre></td></tr></table></figure><p>访问 <code>http://localhost:4000</code> 查看 Fluid 主题效果。</p><hr><h1 id="4-配置-Fluid-主题"><a href="#4-配置-Fluid-主题" class="headerlink" title="4. 配置 Fluid 主题"></a>4. 配置 Fluid 主题</h1><h2 id="4-1-基本配置"><a href="#4-1-基本配置" class="headerlink" title="4.1 基本配置"></a>4.1 基本配置</h2><p>修改 <code>_config.fluid.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 网站信息</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&quot;我的博客&quot;</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&quot;记录技术与生活&quot;</span><br><span class="hljs-attr">logo:</span> <span class="hljs-string">&quot;/images/logo.png&quot;</span>  <span class="hljs-comment"># 网站 Logo</span><br><br><span class="hljs-comment"># 导航栏</span><br><span class="hljs-attr">navbar:</span><br>  <span class="hljs-attr">menu:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;首页&quot;</span>, <span class="hljs-attr">path:</span> <span class="hljs-string">&quot;/&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;归档&quot;</span>, <span class="hljs-attr">path:</span> <span class="hljs-string">&quot;/archives/&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;关于&quot;</span>, <span class="hljs-attr">path:</span> <span class="hljs-string">&quot;/about/&quot;</span> &#125;<br><br><span class="hljs-comment"># 页脚</span><br><span class="hljs-attr">footer:</span><br>  <span class="hljs-attr">since:</span> <span class="hljs-number">2023</span><br>  <span class="hljs-attr">powered:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="4-2-代码高亮"><a href="#4-2-代码高亮" class="headerlink" title="4.2 代码高亮"></a>4.2 代码高亮</h2><p>Hexo 默认使用 <code>highlight.js</code>，Fluid 支持更美观的代码样式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">code_highlight:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">atom-one-dark</span>  <span class="hljs-comment"># 可选主题：github、atom-one-light 等</span><br></code></pre></td></tr></table></figure><h2 id="4-3-评论系统"><a href="#4-3-评论系统" class="headerlink" title="4.3 评论系统"></a>4.3 评论系统</h2><p>Fluid 支持多种评论插件，如 Valine、Gitalk：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">comments:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">valine</span>  <span class="hljs-comment"># 使用 Valine</span><br>  <span class="hljs-attr">app_id:</span> <span class="hljs-string">&quot;your_app_id&quot;</span>  <span class="hljs-comment"># 从 LeanCloud 获取</span><br>  <span class="hljs-attr">app_key:</span> <span class="hljs-string">&quot;your_app_key&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-4-搜索功能"><a href="#4-4-搜索功能" class="headerlink" title="4.4 搜索功能"></a>4.4 搜索功能</h2><p>安装 <code>hexo-generator-search</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-generator-search --save<br></code></pre></td></tr></table></figure><p>配置 <code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">search:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">search.xml</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">post</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><hr><h1 id="5-编写文章"><a href="#5-编写文章" class="headerlink" title="5. 编写文章"></a>5. 编写文章</h1><h2 id="5-1-创建新文章"><a href="#5-1-创建新文章" class="headerlink" title="5.1 创建新文章"></a>5.1 创建新文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;Hello World&quot;</span><br></code></pre></td></tr></table></figure><p>文件位于 <code>source/_posts/hello-world.md</code>。</p><h2 id="5-2-Markdown-语法"><a href="#5-2-Markdown-语法" class="headerlink" title="5.2 Markdown 语法"></a>5.2 Markdown 语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: Hello World<br>date: 2023-10-01<br>tags: [Hexo, Fluid]<br><span class="hljs-section">categories: 技术</span><br><span class="hljs-section">---</span><br><br><span class="hljs-section">## 这是一篇测试文章</span><br><br><span class="hljs-section">### 代码示例</span><br><span class="hljs-code">```python</span><br><span class="hljs-code">print(&quot;Hello, Fluid!&quot;)</span><br></code></pre></td></tr></table></figure><p><strong>图片</strong><br>使用：!  []  ()加载图片，[]内填图片名称，（）填对应路径，注意图片路径可以相对可以绝对。<br><img src="/img/blog/1.png" alt="图片"></p><hr><h1 id="6-部署到-GitHub-Pages"><a href="#6-部署到-GitHub-Pages" class="headerlink" title="6. 部署到 GitHub Pages"></a>6. 部署到 GitHub Pages</h1><h2 id="6-1-创建-GitHub-仓库"><a href="#6-1-创建-GitHub-仓库" class="headerlink" title="6.1 创建 GitHub 仓库"></a>6.1 创建 GitHub 仓库</h2><ol><li>在 GitHub 创建仓库 <code>username.github.io</code>（如 <code>yourname.github.io</code>）。</li><li>本地初始化 Git：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br>git remote add origin https://github.com/yourname/yourname.github.io.git<br></code></pre></td></tr></table></figure></li></ol><h2 id="6-2-安装部署插件"><a href="#6-2-安装部署插件" class="headerlink" title="6.2 安装部署插件"></a>6.2 安装部署插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h2 id="6-3-配置-config-yml"><a href="#6-3-配置-config-yml" class="headerlink" title="6.3 配置 _config.yml"></a>6.3 配置 <code>_config.yml</code></h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/yourname/yourname.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><h2 id="6-4-部署"><a href="#6-4-部署" class="headerlink" title="6.4 部署"></a>6.4 部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><p>访问 <code>https://yourname.github.io</code> 查看博客。</p><hr><h1 id="7-进阶优化"><a href="#7-进阶优化" class="headerlink" title="7. 进阶优化"></a>7. 进阶优化</h1><h2 id="7-1-自定义-CSS"><a href="#7-1-自定义-CSS" class="headerlink" title="7.1 自定义 CSS"></a>7.1 自定义 CSS</h2><p>在 <code>source/css/custom.css</code> 添加：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 自定义样式 */</span><br><span class="hljs-selector-class">.post</span> &#123;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">2rem</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在 <code>_config.fluid.yml</code> 引入：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">custom_css:</span> <span class="hljs-string">/css/custom.css</span><br></code></pre></td></tr></table></figure><h2 id="7-2-添加-Google-Analytics"><a href="#7-2-添加-Google-Analytics" class="headerlink" title="7.2 添加 Google Analytics"></a>7.2 添加 Google Analytics</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">analytics:</span><br>  <span class="hljs-attr">google:</span> <span class="hljs-string">&quot;G-XXXXXXXXXX&quot;</span>  <span class="hljs-comment"># 替换为你的 GA ID</span><br></code></pre></td></tr></table></figure><h2 id="7-3-使用-CDN-加速"><a href="#7-3-使用-CDN-加速" class="headerlink" title="7.3 使用 CDN 加速"></a>7.3 使用 CDN 加速</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cdn:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">js:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/...</span><br>  <span class="hljs-attr">css:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/...</span><br></code></pre></td></tr></table></figure><hr><h2 id="8-常见问题"><a href="#8-常见问题" class="headerlink" title="8. 常见问题"></a>8. 常见问题</h2><p><strong>Q1: 页面样式不生效？</strong><br>• 执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成。</p><p>• 检查 <code>_config.fluid.yml</code> 是否正确配置。</p><p><strong>Q2: 部署失败？</strong><br>• 确保 GitHub 仓库权限正确。</p><p>• 检查 <code>_config.yml</code> 的 <code>deploy</code> 配置。</p><p><strong>Q3: 如何更换主题颜色？</strong><br>修改 <code>_config.fluid.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">color:</span><br>  <span class="hljs-attr">primary:</span> <span class="hljs-string">&quot;#0066CC&quot;</span>  <span class="hljs-comment"># 主色调</span><br></code></pre></td></tr></table></figure><hr><h1 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a>9. 总结</h1><p>通过本指南，你可以快速搭建一个基于 Hexo + Fluid 的高颜值博客，并部署到 GitHub Pages。</p><p>🚀 Happy Blogging! 🚀</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式框架RPC实现及优化</title>
    <link href="/2025/03/13/rpc/"/>
    <url>/2025/03/13/rpc/</url>
    
    <content type="html"><![CDATA[<p>一个实现了Netty网络通信，ZooKeeper注册中心的RPC框架</p><h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><p>  对于需要处理大量并发连接的应用程序，或者即时通信相关的网络应用项目(聊天服务器)，Netty是一个更好的选择。它简化了网<br>络通信的复杂性，提供了丰富的API和灵活的定制能力。<br>  而对于一些简单的网络通信需求，或者对性能要求不高的项目，可以考虑使用NI0来降低开发成本，比如超大文件的写入和导出。</p><p><img src="/img/rpc/image-20250411172652973.png" alt="image-20250411172652973"></p><p><img src="/img/rpc/image-20250413164400003.png" alt="image-20250413164400003"></p><p>它通过 <strong>Pipeline + 事件驱动</strong> 实现高效的非阻塞处理</p><p>核心设计</p><ul><li><strong>I&#x2F;O 多路复用</strong>：单线程通过 <code>Selector</code> 监听多个 Channel 事件（连接、读写）。</li><li><strong>责任链模式</strong>：每个 Channel 的 <code>Pipeline</code> 由多个 <code>ChannelHandler</code> 组成，按顺序处理数据流。</li><li><strong>事件驱动</strong>：仅在有实际 I&#x2F;O 事件（如数据到达）时触发 Handler 执行。</li></ul><h1 id="RPC项目架构"><a href="#RPC项目架构" class="headerlink" title="RPC项目架构"></a>RPC项目架构</h1><h2 id="简单架构"><a href="#简单架构" class="headerlink" title="简单架构"></a>简单架构</h2><p>简单架构分为客户端、服务端，服务端包含需要调用的方法。</p><p>eg：</p><p><img src="/img/rpc/image-20250413112858232.png" alt="image-20250413112858232"></p><p>A想调用B中的方法，例如B中有一个User表，可以通过UseService的getById得到用户属性。</p><p>客户端A想要调用getById方法，传入一个id给服务端b，b返回查询对象。</p><p>若方法都在A端，则直接传统方法访问数据库即可，但在b端实现则需要用到动态代理转发。</p><p>通过动态代理，可以在方法前后增强，即封装为网络通信并获取返回数据。</p><p><img src="/img/rpc/image-20250413113545301.png" alt="image-20250413113545301"></p><p>1、首先声明B中的方法：</p><p><img src="/img/rpc/image-20250413114026314.png" alt="image-20250413114026314"></p><p><img src="/img/rpc/image-20250413113826167.png" alt="image-20250413113826167"></p><p>common里Pojo实体类建立User类，包含id、名称、性别，UserService里定义一个接口，具体实现在impl中，模拟查询并返回数据。</p><p>User类需要实现序列化接口，表示该对象可以序列化。</p><p>2、定义A发给B的请求消息RpcRequest和返回的响应RpcResponse，类似于JavaWeb中的DTO</p><p><img src="/img/rpc/image-20250413114127519.png" alt="image-20250413114127519"></p><p>Rpc请求包括四个：服务类名，即要调用的类；方法名，即调用类里的什么方法；参数列表与类型，定义传入的参数和类型，用来定位方法并传入参数。</p><p><img src="/img/rpc/image-20250413134820837.png" alt="image-20250413134820837"></p><p>通过这四个参数，服务端可以通过反射调用获得参数并返回：</p><p><img src="/img/rpc/image-20250413134937053.png" alt="image-20250413134937053"></p><p>RpcResponse如下：</p><p><img src="/img/rpc/image-20250413135024812.png" alt="image-20250413135024812"></p><p>包含状态码，信息、返回数据等。</p><p>3、客户端创建IoClient用于实现通信底层逻辑，ClientProxy用于对调用方法使用动态代理来调用IoClient，TestClient用于测试调用。</p><p><img src="/img/rpc/image-20250413135221487.png" alt="image-20250413135221487"></p><p>简单框架底层使用Socket通信，创建OOS用于发送序列化，OIS用于接受序列化对象，随后调用oos.writeObject(requese)将获取的对象序列化发送并刷新，reponse通过ois.readObject读取并反序列化。</p><p><img src="/img/rpc/image-20250413135539354.png" alt="image-20250413135539354"></p><p>命名host和port作为传入的服务器地址和端口，重写invoke函数，是动态代理的核心逻辑，用于封装请求并处理服务器响应。</p><p>每次调用方法，传入动态代理，构建request并发送，reponse接受返回数据并返回给调用者。</p><p>使用getProxy方法获得该代理对象，传入class参数即可。</p><p><img src="/img/rpc/image-20250413140229864.png" alt="image-20250413140229864"></p><p><img src="/img/rpc/image-20250413140011554.png" alt="image-20250413140011554"></p><p>TestClient</p><p><img src="/img/rpc/image-20250413140255235.png" alt="image-20250413140255235"></p><p>测试方法创建ClientProxy对象并初始化ip和端口，指定访问地址，随后传入userService类获得代理对象，调用方法。</p><p>即本地只需要有UserService的接口，不需要有实现逻辑，服务端B需要有该接口和对应实现方法。</p><p>4、服务端需要创建RpcServer接口以及实现（分为SimpleRPCServer和ThreadPoolRPCServer），提供端口监听功能，ServiceProvider用于实现一个简单的注册中心，告诉服务端本地实现了什么服务并获取，WorkThread用于处理客户端请求，调用本地服务并返回响应；TestServer用于启动测试服务端。</p><p><img src="/img/rpc/image-20250413141418239.png" alt="image-20250413141418239"></p><p>RPCServer如下。</p><p><img src="/img/rpc/image-20250413140907092.png" alt="image-20250413140907092"></p><p><img src="/img/rpc/image-20250413141337505.png" alt="image-20250413141337505"></p><p>SimpleRPCServer用于创建一个serverSocket实现端口监听，为堵塞监听。</p><p><img src="/img/rpc/image-20250413141552568.png" alt="image-20250413141552568"></p><p><img src="/img/rpc/image-20250413141604656.png" alt="image-20250413141604656"></p><p>ThreadPoolRPCServer类是通过线程池管理和执行任务，处理并发能力。相比简单版每个请求都创建一个新线程，该方法有一套线程管理模式。</p><p><img src="/img/rpc/image-20250413141734981.png" alt="image-20250413141734981"></p><p>简单的注册中心，其中Map存储数据如下，对应接口类名和实现对象：</p><p><img src="/img/rpc/image-20250413141908412.png" alt="image-20250413141908412"></p><p>注册时提供一个实现接口的实例，即可通过service.getClass().getName()获得该实现类对应类名，然后通过service.getClass().getInterfaces(); 获得该类实现的所有方法（一个实现类可能实现多种方法），然后把接口名作为key，实现类实例作为value存入map。</p><p><img src="/img/rpc/image-20250413142930542.png" alt="image-20250413142930542"></p><p><img src="/img/rpc/image-20250413142941329.png" alt="image-20250413142941329"></p><p>workThread用于实现调用逻辑，本类实现了Runnable接口，可以多线程接受请求并调用本地。</p><p>首先通过ois获取对应通信数据并反序列化，调用本类里定义的getResponse获得返回数据，并通过oos序列化发送回去。</p><p>GetResponse中的关键逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//下面的service都是实例</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">//通过Method类提供的getMethod方法，通过传入方法名和对应参数即可确定方法并返回，属于反射</span><br>method = service.getClass().getMethod(rpcRequest.getMethodName,rpcRequese.getParamsType());<br><span class="hljs-comment">//通过Method对象调用的方式，传入实例和对应参数名，即可获得对应结果</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> method.invoke(service,rpcRequese.getParams())<br></code></pre></td></tr></table></figure><p><img src="/img/rpc/image-20250413144849390.png" alt="image-20250413144849390"></p><p>Test部分创建服务实现类，实例化服务中心并注册，实例化服务端并启动。</p><p>以上即实现了简单的rpc框架。</p><p>总结：</p><p>前置：定义Requeset，Response，User</p><p>客户端：定义RpcClient用于实现与B段网络连接（SOCKET），ClientProxy动态代理用于对调用的Userservice进行封装，把传入的参数(ID)封装成Request,包括接口名、方法、参数、参数类型以方便服务端定位方法。</p><p>服务端：定义RpcServer用于监听端口（包括SimpleServer和ThreadPool），ServerProvider用于提供注册服务方便知道本地有什么服务（Map类型），WorkThread用于实现方法，包括通过Socket接收参数、处理参数、返回参数；</p><h2 id="引入netty框架"><a href="#引入netty框架" class="headerlink" title="引入netty框架"></a>引入netty框架</h2><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>​对于引入netty框架，客户端需要创建三个文件，NettyClientHandler负责接收和处理来自服务器的RpcResponse对象；NettyClientInitializer用于初始化channel和ChannelPipeline，其中channel是网络通信的基本单元，ChannelPipeline为处理消息的责任链，包含一系列ChannelHnadler，每个都做不同操作，如编码解码等；NettyRpcClient，作用等同于前面的IOclient，用于处理网络发送的底层逻辑。</p><p>1、NettyClientHandler</p><p><img src="/img/rpc/image-20250413153821713.png" alt="image-20250413153821713"></p><p>​channerRead0为核心方法，用于读取返回数据，输入中的ctx是ChannelHandlerContext类型的参数，它是 Netty中每个处理器(ChannelHandler )的上下文对象，代表了当前 I&#x2F;0 操作的环境。response 是返回的响应信息。</p><p>​ctx.channel（）用于获取当前通道，即于服务端的网络连接。</p><p>​AttributeKey<RpcResponse>key &#x3D; AttributeKey.value0f(“RPCResponse”);用于给当前response一个别名，方便客户端读取，随后通过ctx.channel().attr(key)方法访问自定义键，set设置值。</p><p>​</p><p>2、NettyClientInitializer</p><p><img src="/img/rpc/image-20250413155029581.png" alt="image-20250413155029581"></p><p>​用于初始化客户端的channel和channelPipeLine，即定义这个发送器怎么发送，编码器解码器等等。</p><p>​类中的方法initChannel用于给每个SocketChannel（即新的连接）初始化，并初始化一个独立的流水线用于连接上所有数据的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//此步骤用于解决TCP粘包拆包问题。</span><br>pipeline.addLast(newLengthFieldBasedFrameDecoder(Integer.MAX VALUE, O, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>));<br></code></pre></td></tr></table></figure><p>​<img src="/img/rpc/image-20250413155441888.png" alt="image-20250413155441888"></p><p>0,4字节，即一个int的字节，表示长度。</p><p>​随后添加编码器（序列化），解码器用于接收到的字节流解码回java对象，这里重写通过根据类名解析java类，并转化为该类的对象。</p><p>​<img src="/img/rpc/image-20250413155731078.png" alt="image-20250413155731078"></p><p>​最后把Handler加入流水线。</p><p>3、NettyRpcClient</p><p>​     <img src="/img/rpc/image-20250413160021630.png" alt="image-20250413160021630"></p><p><img src="/img/rpc/image-20250413160030218.png" alt="image-20250413160030218"></p><p>​作为客户端调用rpc逻辑，首先客户端初始化，bootstrap为netty用于启动客户端的对象，负责设置于服务器的连接配置，eventLoopGroup为netty的线程池，用于处理I&#x2F;O操作，NIO为基于非阻塞IO实现。</p><p>​重写SendReuqest作为发送请求方法，首先ChannelFuture 用于阻塞链接服务端，sync代表同步阻塞直接连接成功，然后channel &#x3D; channelFuture.channel()获得当前连接通道，类似于socket。随后实现发送数据并阻塞获得结果，调用NettyHandler里添加的key对应的Response，获得响应并返回。</p><p>4、修改ClientProxy，选择nettyClient，修改test，选择nettyClient。</p><p>总结：需要将客户端RPCClient改为Netty版本，初始化bootstrap并传入初始化器，在初始化器中声明pipeline操作，包括解决粘包、编码器解码器、加入Handler处理逻辑等，其中Handler处理器用于接收服务器返回数据并绑定key在channel中方便后续查询。然后NettyRpcClient后半部分执行Channel发送逻辑和接收逻辑。</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>​服务端需要创建2个部分，NettyServerHandler，类似于workThread，用于接收客户端数据并返回响应；NettyRpcInitializer,用于初始化，NettyRpcServer用于监听请求。</p><p>1、NettyServerHandler</p><p><img src="/img/rpc/image-20250413162059414.png" alt="image-20250413162059414"></p><p>​重写的channelRead0用于读取数据，并调用getRespnse得到响应，并发送回去。</p><p>2、NettyRpcInitializer</p><p><img src="/img/rpc/image-20250413162245779.png" alt="image-20250413162245779"></p><p>​与客户端一致，发送流程和流水线都一样，差别在于多一个注册中心的字段，最后调用NettyServerHandler。</p><p>3、NettyRpcServer</p><p><img src="/img/rpc/image-20250413162508905.png" alt="image-20250413162508905"></p><p>​与之前的simpleServer，ThreadPoolServer相同，都是实现接口，不同的是，前两者是负责监听端口，每当有request发送，则通过workThread新建一个线程进行操作，而Netty通过IO多路复用实现单Selector（BossGroup）对多channel实现监听，把数据处理逻辑都放到pipeLine中。</p><p>​首先启动监听时初始化bossGroup和WordGroup，使用ServerBootSrap启动服务器，并指定配置两个线程组，分别用于处理链接请求和IO请求，并指定使用NIO通道。</p><p>​使用bind将服务端绑定到端口，此时会启动一个监听套接字，随时准备接收，</p><p>总结：使用NettyServer初始化bossGroup和workGroup，使用bootStrap启动器绑定初始化器，定义channel pipeline接收的逻辑，并在pipeline中处理输出，其中pipeline最后调用Handler，调用getResponse获得返回。</p><h2 id="引入ZooKeeper注册中心"><a href="#引入ZooKeeper注册中心" class="headerlink" title="引入ZooKeeper注册中心"></a>引入ZooKeeper注册中心</h2><h3 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h3><p>1、创建ServiceCenter服务中心</p><p><img src="/img/rpc/image-20250413170750395.png" alt="image-20250413170750395"></p><p>InnetSocketAddress是一个类，包含网络地址的IP和端口号。</p><p>对应实现类：</p><p><img src="/img/rpc/image-20250413170853497.png" alt="image-20250413170853497"></p><p><img src="/img/rpc/image-20250413170900495.png" alt="image-20250413170900495"></p><p>2、修改NettyRpcClient</p><p>​从固定端口号改为ZK传入。</p><p><img src="/img/rpc/image-20250413172151768.png" alt="image-20250413172151768"></p><p>​改为</p><p><img src="/img/rpc/image-20250413172139180.png" alt="image-20250413172139180"></p><p>3、修改ClientProxy</p><p>​选择netty客户端并且不用传参。</p><p>​<img src="/img/rpc/image-20250413172308668.png" alt="image-20250413172308668"></p><p>​改为：</p><p><img src="/img/rpc/image-20250413172329835.png" alt="image-20250413172329835"></p><p>4、修改TestClient</p><p>​创建代理对象时，不用从客户端这传入端口、地址等信息了</p><p><img src="/img/rpc/image-20250413172436411.png" alt="image-20250413172436411"></p><p>总结：声明一个服务中心，提前写好对应的IP和端口号，修改NettyClient中输入ip和端口的方式，初始化时自动获得一个服务中心的对象。</p><h3 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h3><p>1、创建ServiceRegister注册中心。</p><p><img src="/img/rpc/image-20250413173453607.png" alt="image-20250413173453607"></p><p>实现类：</p><p><img src="/img/rpc/image-20250413173507169.png" alt="image-20250413173507169"></p><p><img src="/img/rpc/image-20250413173515378.png" alt="image-20250413173515378"></p><p>2、修改ServiceProvider</p><p>​<img src="/img/rpc/image-20250413174447986.png" alt="image-20250413174447986"></p><p>3、修改TestServer</p><p><img src="/img/rpc/image-20250413174622468.png" alt="image-20250413174622468"></p><p>总结：服务端创建一个注册中心，提前定义好ZK的ip和端口，修改ServerProvider，获得自身的ip和端口号，生成本地注册表时发送一份注册到ZK。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Java</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java内部类</title>
    <link href="/2025/02/13/test/"/>
    <url>/2025/02/13/test/</url>
    
    <content type="html"><![CDATA[<p>在当初学习Lambda表达式时，总是迷迷糊糊，恍恍惚惚，所以这次打算一次把自己讲明白。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>为什么会有内部类？</p><p>场景：如果一个类只在另一个类中使用，并且需要直接访问外部类的成员，（包括私有成员），而不需要通过 <code>getter</code> 或 <code>setter</code> 方法。</p><p>例如<code>Node</code> 类通常只在 <code>LinkedList</code> 类中使用。</p><p>一些好处：</p><ul><li>实现多重继承<ul><li>Java本身不支持多重继承，但是可以在类中创建多个内部类，继承不同的类</li></ul></li></ul><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><ul><li>没有显式的类名，直接通过 <code>new</code> 关键字创建对象并实现接口或继承类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Greeting</span> <span class="hljs-variable">greeting</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Greeting</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">greet</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;Hello from anonymous class!&quot;</span>);<br>            &#125;<br>        &#125;;<br>        greeting.greet();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>场景</strong></p><p>比如有一个接口Greeting，里面有一个方法greet，我想使用这个方法。</p><ul><li>传统做法：<ul><li>先创建一个类GreetingImpl实现这个接口，并实现接口中的greet方法，再创建这个实现类的对象，再通过对象调用这个方法。</li></ul></li><li>匿名内部类：<ul><li>实际上整个功能，有效的代码仅仅是重写我需要调用的方法这部分</li><li>可以用匿名内部类直接不实现接口，直接创建一个匿名内部类实现重写我想要调用的方法</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Greeting</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">greet</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GreetingImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Greeting</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">greet</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello from anonymous class!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnonymousClassExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 传统做法</span><br>        <span class="hljs-type">GreetingImpl</span> <span class="hljs-variable">greetingImpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GreetingImpl</span>();<br>        greetingImpl.greet();<br>        <br>        <span class="hljs-comment">// 创建匿名内部类并实现 Greeting 接口</span><br>        <span class="hljs-type">Greeting</span> <span class="hljs-variable">greeting</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Greeting</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">greet</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;Hello from anonymous class!&quot;</span>);<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-comment">// 调用方法</span><br>        greeting.greet();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>进一步的，如果是函数式接口（即只有一个抽象方法的接口），可以用Lambda表达式代替</p><p>Lambda 表达式只能用于实现函数式接口（只有一个抽象方法的接口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Greeting</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">greet</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GreetingImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Greeting</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">greet</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello from anonymous class!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnonymousClassExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 传统做法</span><br>        <span class="hljs-type">GreetingImpl</span> <span class="hljs-variable">greetingImpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GreetingImpl</span>();<br>        greetingImpl.greet();<br>        <br>        <span class="hljs-comment">// 创建匿名内部类并实现 Greeting 接口</span><br>        <span class="hljs-type">Greeting</span> <span class="hljs-variable">greeting</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Greeting</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">greet</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;Hello from anonymous class!&quot;</span>);<br>            &#125;<br>        &#125;;<br>        <br>        <span class="hljs-comment">// 使用 Lambda 表达式实现接口</span><br>        <span class="hljs-type">Greeting</span> <span class="hljs-variable">greeting</span> <span class="hljs-operator">=</span> () -&gt; System.out.println(<span class="hljs-string">&quot;Hello from Lambda!&quot;</span>);<br><br>        <span class="hljs-comment">// 调用方法</span><br>        greeting.greet();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Lambda表达式还可以用作函数式编程，“传递函数”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">operate</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, Calculator calculator)</span> &#123;<br>        <span class="hljs-keyword">return</span> calculator.calculate(a, b);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">// 传统调用，需要传递Calculator的实现类的对象，这里用匿名内部类代替</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> operate(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Calculator</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>                <span class="hljs-keyword">return</span> x + y;<br>            &#125;<br>        &#125;);<br>        <br>        <span class="hljs-comment">// Lambda表达式，看似是传递了一个方法，但是实际上是传递的接口的实现类对象</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> operate(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, (x, y) -&gt; x + y);<br>        <br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>方法引用是简化Lambda表达式，看似是传递的方法，实际上和Lambda表达式一样传递的是接口实现类的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodReferenceExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;String&gt; fruits = Arrays.asList(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>);<br><br>        <span class="hljs-comment">// 使用 Lambda 表达式</span><br>        List&lt;Integer&gt; lengths1 = fruits.stream()<br>                                     .map(s -&gt; s.length())<br>                                     .collect(Collectors.toList());<br>        System.out.println(lengths1); <span class="hljs-comment">// 输出 [5, 6, 6]</span><br><br>        <span class="hljs-comment">// 使用方法引用</span><br>        List&lt;Integer&gt; lengths2 = fruits.stream()<br>                                     .map(String::length)<br>                                     .collect(Collectors.toList());<br>        System.out.println(lengths2); <span class="hljs-comment">// 输出 [5, 6, 6]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>欢迎来到多云的小站</title>
    <link href="/2025/02/10/hello-world/"/>
    <url>/2025/02/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>你好！我是多云，一名热爱技术与分享的博主。</p><p>我的博客主要记录：</p><p>💻 ​​技术笔记​​：编程技巧、工具推荐、问题解决<br>🌱 ​​学习心得​​：读书笔记、知识整理<br>🎨 ​​生活随笔​​：旅行、摄影、偶尔的碎碎念<br>博客地址：​​<a href="https://duoyunhh.com/">https://duoyunhh.com​​</a><br>欢迎来逛逛，一起交流！ ✨</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
